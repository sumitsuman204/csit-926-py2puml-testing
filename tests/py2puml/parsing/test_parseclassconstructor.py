# Automatically generated by Pynguin.
import py2puml.parsing.parseclassconstructor as module_0
import inspect
from string import ascii_letters, digits, punctuation
import py2puml.parsing.parseclassconstructor as module_0
import py2puml.domain.umlrelation
import py2puml.parsing.moduleresolver
import typing
from py2puml.parsing.parseclassconstructor import import_module
from hypothesis import given, settings, strategies as st
from py2puml.parsing.parseclassconstructor import ModuleResolver

def test_case_0():
    str_0 = None
    tuple_0 = module_0.parse_class_constructor(str_0, str_0, str_0)
    assert tuple_0 == ([], {})

@given(name=st.text(), type=st.text(), static=st.booleans())
def test_fuzz_UmlAttribute(name: str, type: str, static: bool) -> None:
    py2puml.parsing.parseclassconstructor.UmlAttribute(name=name, type=type, static=static)

@given(
    source_fqn=st.text(),
    target_fqn=st.text(),
    type=st.sampled_from(py2puml.domain.umlrelation.RelType),
)
def test_fuzz_UmlRelation(
    source_fqn: str, target_fqn: str, type: py2puml.domain.umlrelation.RelType
) -> None:
    py2puml.parsing.parseclassconstructor.UmlRelation(
        source_fqn=source_fqn, target_fqn=target_fqn, type=type
    )

@given(text=st.text())
def test_fuzz_dedent(text) -> None:
    py2puml.parsing.parseclassconstructor.dedent(text=text)

MODULE_NAME_MIN_LENGTH = 1
MODULE_NAME_MAX_LENGTH = 10
MODULE_NAME_CHARS = ascii_letters + '_'

@given(name=st.text(min_size=MODULE_NAME_MIN_LENGTH, max_size=MODULE_NAME_MAX_LENGTH, alphabet=st.characters(whitelist_categories=('Lu', 'Ll', 'Nd', 'Pc'))), package=st.none())
@settings(max_examples=10)
def test_fuzz_import_module(name, package) -> None:
    try:
        import_module(name=name, package=package)
    except ModuleNotFoundError:
        pass
    else:
        assert name.isidentifier()

@given(class_type=st.just(type), class_fqn=st.text(), root_module_name=st.text())
def test_fuzz_parse_class_constructor(
    class_type: typing.Type, class_fqn: str, root_module_name: str
) -> None:
    py2puml.parsing.parseclassconstructor.parse_class_constructor(
        class_type=class_type, class_fqn=class_fqn, root_module_name=root_module_name
    )