from py2puml.example import py2puml
import os

def test_example():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    assert isinstance(output_string, str)

def test_example_contains_identifies_has_startuml_tag():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "@startuml" in output_string

def test_example_contains_is_not_null():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert len(output_string) > 0

def test_example_contains_creates_namespace():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "namespace" in output_string

def test_example_contains_relations():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "<!--" or "*--" in output_string

def test_example_contains_identifies_package():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "package.Package" in output_string

def test_example_contains_identifies_umlattribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "umlclass.UmlAttribute" in output_string

def test_example_contains_identifies_umlclass():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "umlclass.UmlClass" in output_string

def test_example_contains_identifies_member():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "umlenum.Member" in output_string

def test_example_contains_identifies_umlenum():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "umlenum.UmlEnum" in output_string

def test_example_contains_identifies_reltype():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "umlrelation.RelType" in output_string

def test_example_contains_domain():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert 'domain' in output_string

def test_example_contains_identifies_has_footer():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "footer Generated by //py2puml//" in output_string

def test_example_contains_identifies_has_enduml_tag():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "@enduml" in output_string

def test_example_contains_name_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "name" in output_string

def test_example_contains_children_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "children" in output_string

def test_example_contains_item_numbers_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "items_number" in output_string

def test_example_contains_type_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "type" in output_string

def test_example_contains_static_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "static" in output_string

def test_example_contains_attributes_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "attributes" in output_string

def test_example_contains_is_abstract_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "is_abstract" in output_string

def test_example_contains_fqn_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "fqn" in output_string

def test_example_contains_value_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "value" in output_string

def test_example_contains_members_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "members" in output_string

def test_example_contains_composition_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "COMPOSITION" in output_string

def test_example_contains_inheritance_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "INHERITANCE" in output_string

def test_example_contains_source_fqn_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "source_fqn" in output_string

def test_example_contains_target_fqn_attribute():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_string = ''.join(output_generator)
    print(output_string)
    assert "source_fqn" in output_string

def test_example_generates_correct_generator():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    result = str(list(output_generator))
    #expected_output_list =  "['@startuml py2puml.domain\n', 'namespace py2puml.domain {\n', '  namespace package {}\n', '  namespace umlclass {}\n', '  namespace umlitem {}\n', '  namespace umlenum {}\n', '  namespace umlrelation {}\n', '}\n', 'class py2puml.domain.package.Package {\n', '  name: str\n', '  children: List[Package]\n', '  items_number: int\n', '}\n', 'class py2puml.domain.umlclass.UmlAttribute {\n', '  name: str\n', '  type: str\n', '  static: bool\n', '}\n', 'class py2puml.domain.umlclass.UmlClass {\n', '  attributes: List[UmlAttribute]\n', '  is_abstract: bool\n', '}\n', 'class py2puml.domain.umlitem.UmlItem {\n', '  name: str\n', '  fqn: str\n', '}\n', 'class py2puml.domain.umlenum.Member {\n', '  name: str\n', '  value: str\n', '}\n', 'class py2puml.domain.umlenum.UmlEnum {\n', '  members: List[Member]\n', '}\n', 'enum py2puml.domain.umlrelation.RelType {\n', '  COMPOSITION: * {static}\n', '  INHERITANCE: <| {static}\n', '}\n', 'class py2puml.domain.umlrelation.UmlRelation {\n', '  source_fqn: str\n', '  target_fqn: str\n', '  type: RelType\n', '}\n', 'py2puml.domain.package.Package *-- py2puml.domain.package.Package\n', 'py2puml.domain.umlclass.UmlClass *-- py2puml.domain.umlclass.UmlAttribute\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlclass.UmlClass\n', 'py2puml.domain.umlenum.UmlEnum *-- py2puml.domain.umlenum.Member\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlenum.UmlEnum\n', 'py2puml.domain.umlrelation.UmlRelation *-- py2puml.domain.umlrelation.RelType\n', 'footer Generated by //py2puml//\n', '@enduml\n']"
    assert "@startuml" in str(result)

def test_example_generates_correct_generator_end():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    result = str(list(output_generator))
    #expected_output_list =  "['@startuml py2puml.domain\n', 'namespace py2puml.domain {\n', '  namespace package {}\n', '  namespace umlclass {}\n', '  namespace umlitem {}\n', '  namespace umlenum {}\n', '  namespace umlrelation {}\n', '}\n', 'class py2puml.domain.package.Package {\n', '  name: str\n', '  children: List[Package]\n', '  items_number: int\n', '}\n', 'class py2puml.domain.umlclass.UmlAttribute {\n', '  name: str\n', '  type: str\n', '  static: bool\n', '}\n', 'class py2puml.domain.umlclass.UmlClass {\n', '  attributes: List[UmlAttribute]\n', '  is_abstract: bool\n', '}\n', 'class py2puml.domain.umlitem.UmlItem {\n', '  name: str\n', '  fqn: str\n', '}\n', 'class py2puml.domain.umlenum.Member {\n', '  name: str\n', '  value: str\n', '}\n', 'class py2puml.domain.umlenum.UmlEnum {\n', '  members: List[Member]\n', '}\n', 'enum py2puml.domain.umlrelation.RelType {\n', '  COMPOSITION: * {static}\n', '  INHERITANCE: <| {static}\n', '}\n', 'class py2puml.domain.umlrelation.UmlRelation {\n', '  source_fqn: str\n', '  target_fqn: str\n', '  type: RelType\n', '}\n', 'py2puml.domain.package.Package *-- py2puml.domain.package.Package\n', 'py2puml.domain.umlclass.UmlClass *-- py2puml.domain.umlclass.UmlAttribute\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlclass.UmlClass\n', 'py2puml.domain.umlenum.UmlEnum *-- py2puml.domain.umlenum.Member\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlenum.UmlEnum\n', 'py2puml.domain.umlrelation.UmlRelation *-- py2puml.domain.umlrelation.RelType\n', 'footer Generated by //py2puml//\n', '@enduml\n']"
    assert "@enduml" in str(result)

def test_example_joins_module_and_domain():
    # Test printing the PlantUML content
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_result = ''.join(output_generator)
    #expected_output_list =  "['@startuml py2puml.domain\n', 'namespace py2puml.domain {\n', '  namespace package {}\n', '  namespace umlclass {}\n', '  namespace umlitem {}\n', '  namespace umlenum {}\n', '  namespace umlrelation {}\n', '}\n', 'class py2puml.domain.package.Package {\n', '  name: str\n', '  children: List[Package]\n', '  items_number: int\n', '}\n', 'class py2puml.domain.umlclass.UmlAttribute {\n', '  name: str\n', '  type: str\n', '  static: bool\n', '}\n', 'class py2puml.domain.umlclass.UmlClass {\n', '  attributes: List[UmlAttribute]\n', '  is_abstract: bool\n', '}\n', 'class py2puml.domain.umlitem.UmlItem {\n', '  name: str\n', '  fqn: str\n', '}\n', 'class py2puml.domain.umlenum.Member {\n', '  name: str\n', '  value: str\n', '}\n', 'class py2puml.domain.umlenum.UmlEnum {\n', '  members: List[Member]\n', '}\n', 'enum py2puml.domain.umlrelation.RelType {\n', '  COMPOSITION: * {static}\n', '  INHERITANCE: <| {static}\n', '}\n', 'class py2puml.domain.umlrelation.UmlRelation {\n', '  source_fqn: str\n', '  target_fqn: str\n', '  type: RelType\n', '}\n', 'py2puml.domain.package.Package *-- py2puml.domain.package.Package\n', 'py2puml.domain.umlclass.UmlClass *-- py2puml.domain.umlclass.UmlAttribute\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlclass.UmlClass\n', 'py2puml.domain.umlenum.UmlEnum *-- py2puml.domain.umlenum.Member\n', 'py2puml.domain.umlitem.UmlItem <|-- py2puml.domain.umlenum.UmlEnum\n', 'py2puml.domain.umlrelation.UmlRelation *-- py2puml.domain.umlrelation.RelType\n', 'footer Generated by //py2puml//\n', '@enduml\n']"
    assert output_result

def test_example_joins_module_and_domain_check():
    # Test printing the PlantUML content
    flag = 0
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    try:
        with open('py2puml/py2puml.domain.puml', 'w', encoding='utf8') as puml_file: 
            puml_file.writelines(py2puml('py2puml/domain', 'py2puml.domain'))
        flag = 1
    except:
        print("Error")
    assert flag == 1

def test_example_joins_module_and_domain_check_file_content():
    # Test printing the PlantUML content
    output = ""
    output_generator = py2puml('py2puml/domain', 'py2puml.domain')
    output_result = ''.join(output_generator)
    with open('py2puml/py2puml.domain.puml', 'r') as puml_file: 
        for line in puml_file.readlines():
            output = output + line 
    assert output == output_result 
            
def test_example_joins_module_and_domain_check_read_and_write():
    # Test printing the PlantUML content
    flag = 0
    output = ""
    output_generator = ''.join(py2puml('py2puml/domain', 'py2puml.domain'))
    try:
        with open('py2puml/py2puml.domain1.puml', 'w', encoding='ascii') as puml_file: 
            puml_file.writelines(py2puml('py2puml/domain', 'py2puml.domain'))
        flag = 1
    except:
        print("Error")
    with open('py2puml/py2puml.domain1.puml', 'r') as puml_file: 
        for line in puml_file.readlines():
            output = output + line
    assert output == output_generator